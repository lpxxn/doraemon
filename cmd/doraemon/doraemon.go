package main

import (
	"fmt"

	"github.com/c-bata/go-prompt"
	"github.com/lpxxn/doraemon/config"
	"github.com/lpxxn/doraemon/utils"
	"github.com/spf13/cobra"
)

var loginCmd = &cobra.Command{
	Use:     "login",
	Aliases: []string{"mc"},
	Short:   "login",
	Long:    "\n oauth login.",
	Run:     runLoginCmd,
}

func initConf() error {
	if err := config.ParseConfig(); err != nil {
		return err
	}
	// fmt.Println(*config.LoginConf)
	// config.OpenConfDir()
	setSSHSuggest()
	return nil
}

// üëª >
//const consolePrefix = "‚ö°Ô∏è>>> "
const consolePrefix = "o((=Ôæü„ÇßÔæü=))o > "
//const consolePrefix = "ü§™ >> "
const mascot1 = `
      ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£¥‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚†∂‚£∂‚£§‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä 
      ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å ‚†Ä‚¢Ä ‚†à‚¢ø‚¢Ä‚£Ä   ‚†π‚£ø‚£ø‚£¶‚£Ñ‚†Ä‚†Ä‚†Ä 
      ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†Ä‚†Ä ‚£ü‚°á‚¢ò ‚£æ‚£Ω‚†Ä  ‚†Ä‚°è‚†â‚†ô‚¢õ‚£∑‚°ñ‚†Ä 
      ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†∑‚†∂‚†§‚†ô‚†í‚†Ä‚†í‚¢ª‚£ø‚£ø‚°∑‚†ã‚†Ä ‚†¥‚†û‚†ã‚†Å‚¢ô‚£ø‚£ø‚£Ñ 
      ‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£Ø‚£§‚£§‚£§‚£§‚£§‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚¢π‚°Ñ‚†Ä  ‚†Ä ‚†Ä‚†õ‚†õ‚†ã‚†â‚†π‚°á 
      ‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚£Ä‚£†‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£º‚£á‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£õ‚£õ‚£í‚£≤‚¢æ‚°∑ 
      ‚¢Ä‚†§‚†í‚†í‚¢º‚£ø‚£ø‚£ø‚£ø‚†∂‚†û‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å ‚£º‚†É 
      ‚¢Æ‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£Ü‚†Ä‚†Ä ‚†ª‚£ø‚°ø‚†õ‚†â‚†â‚†Å‚†Ä‚†â‚†â‚†õ‚†ø‚£ø‚£ø‚†ü‚†Å  ‚†Ä‚£º‚†É‚†Ä 
      ‚†à‚†ì‚†∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°Ä‚†Ä ‚†à‚†í‚¢§‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚£Ä‚£Ä‚°†‚†ö‚†Å ‚†Ä‚¢Ä‚°º‚†É‚†Ä‚†Ä 
      ‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£§‚£§‚£§‚£§‚£≠‚£≠‚£≠‚£≠‚£≠‚£•‚£§‚£§‚£§‚£¥‚£ü‚†Å
`

const openConfigDir = "openConfigDir"

var existCommand = map[string]struct{}{"exit": {}, ":q": {}}

func main() {
	if err := initConf(); err != nil {
		panic(err)
	}
	fmt.Println(mascot1)
	for {
		fmt.Println("Please select command.")
		cmdName := prompt.Input(consolePrefix, sshCompleter)
		//fmt.Println("You selected " + sshName)
		if _, ok := existCommand[cmdName]; ok {
			fmt.Println("üëãüëãüëã bye ~")
			return
		}
		if openConfigDir == cmdName {
			if err := config.OpenConfDir(); err != nil {
				fmt.Println(err)
			}
			continue
		}
		if err := startSSHShell(cmdName); err != nil {
			fmt.Println(err)
		}
	}
}

func startSSHShell(sshName string) error {
	sshConfig, err := config.SSHConfigByName(sshName)
	if err != nil {
		return err
	}
	client, err := utils.NewSSHClient(sshConfig)
	if err != nil {
		return err

	}
	// Create Session
	session, err := client.CreateSession()
	if err != nil {
		return err
	}

	// Start ssh shell
	return client.Shell(session)
}

func runLoginCmd(cmd *cobra.Command, args []string) {
	utils.SendMsg(true, "go ...", "login ~", utils.Yellow, true)
}

var sshSuggest []prompt.Suggest

func sshCompleter(d prompt.Document) []prompt.Suggest {
	return prompt.FilterHasPrefix(sshSuggest, d.GetWordBeforeCursor(), true)
}

func setSSHSuggest() {
	sshSuggest = sshSuggest[:0]
	for _, item := range config.LoginConf.SSHInfo {
		sshSuggest = append(sshSuggest, prompt.Suggest{
			Text:        item.Name,
			Description: item.Desc,
		})
	}
	addOpenDirSuggest()
}

func addOpenDirSuggest() {
	sshSuggest = append(sshSuggest, prompt.Suggest{
		Text:        "openConfigDir",
		Description: "open config directory",
	})	
}
